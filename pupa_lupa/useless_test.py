# import math
# import random
# from matplotlib import pyplot as plt
#
# from Tools.intersection_point_horizontal_plane import intersection_point_horizontal_plane
#
#
# def r_int():
#     return random.randint(0, 15)
#
#
# def simplify_line(x: [float], y: [float], dot_count: int) -> ([int], [int]):
#     if len(x) <= dot_count or len(y) <= dot_count or dot_count < 3:
#         return x, y
#
#     total_len = 0
#     for i in range(len(line.x) - 1):
#         x1, x2, y1, y2 = line.x[i], line.x[i + 1], line.y[i], line.y[i + 1]
#         total_len += ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
#
#     current_len, step, simplify_x, simplify_y = 0, total_len / dot_count, [line.x[0]], [line.y[0]]
#
#     for i in range(len(line.x) - 1):
#         x1, x2, y1, y2 = line.x[i], line.x[i + 1], line.y[i], line.y[i + 1]
#         distance_between_dots = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
#         if current_len + distance_between_dots > step:
#             percent = (step - current_len) / distance_between_dots
#
#             x3, y3, _ = intersection_point_horizontal_plane([x1, y1, 0], [x2, y2, 1000], int(percent * 1000))
#             simplify_x.append(x3)
#             simplify_y.append(y3)
#             current_len = current_len + distance_between_dots - step
#         else:
#             current_len += distance_between_dots
#
#     return simplify_x, simplify_y
#
#
#
# class Line:
#     def __init__(self):
#         self.x = [14.175393817767342, 14.154351235764596, 14.1122660717591, 14.02809574374811, 13.859755087726134,
#                   13.58620152169042, 13.228477627643716, 12.849711151594267, 12.576157585558553, 11.650283977437676,
#                   10.072090327231633, 8.157215364981637, 7.273426920866252, 6.789447534803066, 6.410681058753616,
#                   5.568977778643727, 4.958742900564057, 4.516848678506365, 4.0749544564486735, 3.696187980399224,
#                   3.5068047423744986, 3.2542937583415323, 3.149080848327796, 2.9807401923058183, 2.833442118286588,
#                   2.7071866262701043, 2.6861440442673574, 2.6861440442673574, 2.9176124462975768, 3.170123430330543,
#                   3.6330602343909826, 3.990784128437685, 4.790402244542079, 5.989829418698672, 6.137127492717902,
#                   7.399682412882735, 7.715321142923943, 7.736363724926691, 7.715321142923943, 7.5259379048992185,
#                   7.399682412882735, 7.168214010852515, 6.810490116805813, 6.158170074720649, 5.190211302594276,
#                   4.727274498533838, 4.306422858478894, 3.8014008904129604, 3.3595066683552686, 3.04386793831406,
#                   2.601973716256368, 2.28633498621516, 2.1390369121959294, 2.033824002182193, 1.991738838176699,
#                   1.991738838176699, 2.033824002182193, 2.1600794941986767, 2.202164658204171, 2.2442498222096656,
#                   2.349462732223402, 2.601973716256368, 2.749271790275599, 2.9176124462975768, 2.959697610303071,
#                   2.9807401923058183, 3.0017827743085657, 3.022825356311313, 3.04386793831406, 3.0859531023195546,
#                   3.149080848327796, 3.2332511763387854, 3.42263441436351, 3.5068047423744986, 3.6330602343909826,
#                   3.8014008904129604, 3.969741546434938, 4.18016736646241, 4.55893384251186, 5.148126138588783,
#                   5.800446180673946, 5.905659090687682, 7.084043682841527, 7.82053405293768, 8.514939259028338,
#                   8.998918645091525, 9.41977028514647, 10.198345819248116, 10.829623279330534, 12.155305945503608,
#                   12.786583405586025, 13.228477627643716, 13.417860865668443, 13.58620152169042, 13.754542177712397,
#                   13.880797669728882, 13.986010579742617, 14.070180907753606, 14.133308653761848, 14.175393817767342,
#                   14.175393817767342, 14.19643639977009, 14.25956414577833, 14.280606727781079, 14.301649309783825,
#                   14.301649309783825, 14.175393817767342]
#         self.y = [7.674994497028397, 7.674994497028395, 7.912722870349988, 8.299031476997579, 8.95278450363196,
#                   9.457957296940348, 10.349438696896325, 11.062623816861105, 11.389500330178297, 12.191833590138675,
#                   13.083314990094651, 13.49933964340744, 13.737068016729033, 13.737068016729033, 13.737068016729033,
#                   13.737068016729033, 13.707351970063835, 13.647919876733436, 13.439907550077042, 13.14274708342505,
#                   12.934734756768655, 12.607858243451464, 12.310697776799472, 11.98382126348228, 11.686660796830289,
#                   11.389500330178297, 11.062623816861105, 10.735747303543913, 10.319722650231125, 9.992846136913933,
#                   9.665969623596743, 9.428241250275148, 9.160796830288355, 8.744772176975566, 8.685340083645169,
#                   7.348117983711203, 6.486352630420427, 6.100044023772838, 5.832599603786045, 5.624587277129651,
#                   5.505723090468853, 5.446290997138455, 5.446290997138455, 5.743451463790446, 6.545784723750826,
#                   6.9320933303984145, 7.348117983711203, 7.823574730354391, 7.972154963680387, 7.972154963680387,
#                   7.734426590358794, 7.407550077041602, 7.199537750385208, 6.9320933303984145, 6.664648910411623,
#                   6.426920537090028, 5.921747743781642, 5.594871230464451, 5.476007043803655, 5.446290997138455,
#                   5.2679947171472605, 4.851970063834472, 4.52509355051728, 4.019920757208894, 3.8713405238828975,
#                   3.722760290556901, 3.5444640105657057, 3.39588377723971, 3.0987233105877174, 2.8312788906009247,
#                   2.6232665639445303, 2.3558221439577376, 2.0586616773057456, 1.9100814439797493, 1.7317851639885542,
#                   1.5237728373321597, 1.3157605106757653, 1.1968963240149684, 1.0780321373541715, 0.9888839973585739,
#                   0.9888839973585739, 0.9888839973585739, 0.9888839973585739, 0.9888839973585739, 1.0186000440237732,
#                   1.1968963240149684, 1.3454765573409646, 1.7317851639885542, 1.9397974906449487, 2.444970283953335,
#                   2.6232665639445303, 2.890710983931323, 3.158155403918116, 3.3661677305745106, 3.7524763372221,
#                   4.109068897204491, 4.4062293638564825, 4.822254017169271, 5.357142857142858, 5.832599603786045,
#                   6.1891921637684355, 6.664648910411623, 7.169821703720009, 7.407550077041602, 7.556130310367598,
#                   7.6155624036979965, 7.674994497028397]
#
#
# if __name__ == "__main__":
#     line = Line()
#     dot_count = 13
#     x, y = simplify_line(line.x, line.y, dot_count)
#
#     plt.plot(x, y)
#     plt.plot(line.x, line.y)
#     plt.show()
